/**
 * @page objects Objects
 *
 * @section objects_sec Objects
 *
 * As mentioned above there are three rules you have to follow while
 * intergrating your object classes into OOS.
 *
 * @subsection step1 Derive from class object
 *
 * All your entity classes or extity base classes must be derived from
 * oos::object and must have a default constructor.
 *
 * @code
 * class person : public oos::object
 * {
 *   std::string name_;
 *
 * public:
 *   person();
 *   virtual ~person();
 * };
 * @endcode
 *
 * @subsection step2 Provide access methods
 *
 * Write correct access (get/set) methods for all your member attributes.
 * It is important when modifying an attribute to use the oos::object::modify()
 * method. It tells the oos::object_store and the oos::object_observer objects
 * that an object is modified.
 *
 * @code
 * void person::name(const std::string &n)
 * {
 *   modify(name_, n);
 * }
 *
 * std::string name() const
 * {
 *   return name_;
 * }
 * @endcode
 *
 * @subsection step3 Make it serializable
 *
 * To make the class serializable you have to implement the methods
 * oos::object::serialize() and oos::object::deserialize(). And don't forget
 * to call these methods for your super class.
 *
 * @code
 * void person::serialize(oos::object_writer &serializer) const
 * {
 *   object::serialize(serializer);
 *   serializer.read("name", name_);
 * }
 *
 * void person::deserialize(oos::object_reader &deserializer)
 * {
 *   object::deserialize(deserializer);
 *   deserializer->write("name", name_);
 * }
 * @endcode
 */
