/**
 * @htmlonly
 * <div class="width75 float_left">
 * @endhtmlonly
 *
 * @htmlonly
 * <table id="doc_nav"><tbody><tr>
 *   <td align="left" width="40%"></td>
 *   <td align="center" width="20%"></td>
 *   <td align="right" width="40%">Next</td>
 *   <td><div class="right-arrow-top"></td></tr><tr>
 *   <td align="left" width="40%">
 * @endhtmlonly
 * @htmlonly
 *   </td>
 *   <td width="20%"></td>
 *   <td align="right" width="40%">
 * @endhtmlonly
 * @ref objects
 * @htmlonly
 *   </td><td><div class="right-arrow-bottom"></td>
 * </tr></tbody></table>
 * @endhtmlonly
 *
 * @mainpage Overview
 *
 * @section intro_sec Introduction
 *
 * The following documentation will give you an overview over
 * the Open Object Store API. It will show you all main components
 * of the library so that you can start building your own application
 * with it.
 *
 * OOS provides one container for all your objects. It let you access
 * and filter your objects. Relation between object are tracked
 * automatically. And with sessions and transactions you can persist
 * your data.
 *
 * All classes are inside the namespace oos. I tried to give the library
 * the look and feel of the STL so that it can interact with it easily.
 * 
 * As you will learn you must derive all your objects from a base object
 * (oos::object). This object provide a couple of methods and some
 * functionality important to the oos::object_store.
 *
 * - <b>unique id</b>: Each object gets a unique id independent of its
 * type. The oos::object_store manages these ids and use them to identify
 * each object. By now this id is used as the primary key.
 *
 * - <b>modify method</b>: When modifying an attribute you have to use
 * oos::object::modify. By calling this method the oos::object_store can
 * keep track of the changes made to an object.
 *
 * - <b>serialize methods</b>: You have to overwrite the serialize
 * methods oos::object::serialize and oos::object::deserialize to give the
 * oos::object_store the opportunity to know, read and write all
 * attributes. And don't forget to call serialize and deserialize methods
 * of the base class!
 *
 * Now lets start...
 *
 * @htmlonly
 * <table id="doc_nav"><tbody><tr>
 *   <td align="left" width="40%"></td>
 *   <td align="center" width="20%"></td>
 *   <td align="right" width="40%">Next</td>
 *   <td><div class="right-arrow-top"></td></tr><tr>
 *   <td align="left" width="40%">
 * @endhtmlonly
 * @htmlonly
 *   </td>
 *   <td width="20%"></td>
 *   <td align="right" width="40%">
 * @endhtmlonly
 * @ref objects_sec
 * @htmlonly
 *   </td><td><div class="right-arrow-bottom"></td>
 * </tr></tbody></table>
 * @endhtmlonly
 *
 * @htmlonly
 * </div>
 * <div id="side_toc" class="width25 float_right">
 * @endhtmlonly
 * <b>Table of content</b> @n
 * <ul>
 *   <li>@ref index</li>
 *   <li>@ref objects
 *       <ul>
 *         <li>@ref step1</li>
 *         <li>@ref step2</li>
 *         <li>@ref step3</li>
 *       </ul>
 *   </li>
 *   <li>@ref store
 *     <ul>
 *       <li>@ref prototypes</li>
 *       <li>@ref add_objects</li>
 *       <li>@ref modify_objects</li>
 *       <li>@ref remove_objects</li>
 *     </ul>
 *   </li>
 *   <li>@ref relations
 *     <ul>
 *       <li>@ref one_to_one</li>
 *       <li>@ref one_to_many</li>
 *     </ul>
 *   </li>
 *   <li>@ref view</li>
 *   <li>@ref expressions</li>
 *   <li>@ref database
 *      <ul>
 *        <li>@ref support_sec</li>
 *        <li>@ref db_relation_sec</li>
 *      </ul>
 *   </li>
 * </ul>
 * @htmlonly
 * </div>
 * @endhtmlonly
 */
