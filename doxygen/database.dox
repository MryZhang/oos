/**
 * @htmlonly
 * <div class="width75 float_left">
 * @endhtmlonly
 *
 * @htmlonly
 * <table id="doc_nav"><tbody><tr>
 *   <td align="left" width="40%">
 * @endhtmlonly
 * @ref expressions
 * @htmlonly
 *   </td>
 *   <td width="20%"></td>
 *   <td align="right" width="40%">
 * @endhtmlonly
 * @htmlonly
 *   </td>
 * </tr></tbody></table>
 * @endhtmlonly
 *
 * @page database Persist Objects
 *
 * @section database_sec Persist Objects
 *
 * When it comes to persistence you have to deal with sessions
 * and transactions. You have to create a session for a specific
 * database and wrap a transaction around your insertions or
 * modifications.
 *
 * After created a session objects you can either create the
 * database schema ...
 *
 * @code
 * // the object store
 * object_store ostore;
 *
 * // configure object store
 * // ...
 *
 * // create and open a session
 * oos::session ses(ostore, "sqlite://person.db");
 *
 * // create the database schema
 * ses.create();
 * @endcode
 *
 * ... or load the data from database.
 *
 * @code
 * // load the data from database
 * ses.load();
 * @endcode
 *
 * Once the schema is created or the data is loaded you can start
 * and insert, update or delete your data. Therefor create a transaction
 * object with the current session and start the transaction by calling
 * oos::transaction::begin(). After completing your modifications call
 * oos::transaction::commit() to commit all your modifications to the
 * database. If in error occurred while doing your modifications catch
 * the exception. In the catch block you can call oos::transaction::rollback()
 * to rollback all your modifications.
 *
 * @code
 * // create a transaction for session
 *
 * oos::transaction tr(ses);
 * try {
 *   // begin the transaction
 *   tr.begin();
 *
 *   // insert some objects
 *   ostore.insert(new person("joe", 45))
 *   ostore.insert(new person("walter", 56));
 *   ostore.insert(new person("helen", 37));
 *   ostore.insert(new person("tim", 14));
 *
 *   // commit the modifications
 *   tr.commit();
 * } catch (exception &ex) {
 *   // on error rollback transactions
 *   tr.rollback();
 * }
 * @endcode
 *
 * @section support_sec Supported Databases
 *
 * There're currently two supported databases and the in memory database.
 * But more databases will follow. Next is the description of the
 * database connection string for the supported databases.
 *
 * @subsection mysql_sec MySQL
 *
 * @code
 * // MySQL connection string with password
 * session ses(ostore, "mysql://user:passwd@host/db");
 *
 * // MySQL connection string without password
 * session ses(ostore, "mysql://user@host/db");
 * @endcode
 *
 * @subsection sqlite_sec SQLite
 *
 * @code
 * // MySQL connection string
 * session ses(ostore, "sqlite://database.sqlite");
 * @endcode
 *
 * @section db_relation_sec Relations on Database
 *
 * In short: All kinds of supported relations (list, vector and
 * linked_list) are working out of the box. You don't have to
 * worry about saving and loading relations.
 *
 * The long description: When loading a relation from database at least
 * two object types/tables are involved the parent and the children. With
 * theses two participans we deal with two scenarios: The parent is loaded
 * before its children and the children are loaded first.
 *
 * <b>Scenario 1:</b> Parents are loaded first. Everything is fine. We mark the parent
 * as loaded and when the children table is loaded all parent objects can
 * be filled with their children.
 *
 * <b>Scenario 2:</b> Children are loaded first. 
 * 
 *
 * @htmlonly
 * </div>
 * <div id="side_toc" class="width25 float_right">
 * @endhtmlonly
 * <b>Table of content</b> @n
 * <ul>
 *   <li>@ref index
 *    <ul><li>@ref intro_sec</li></ul>
 *   </li>
 *   <li>@ref store
 *   <ul>
 *     <li>@ref objects_sec</li>
 *     <li>@ref object_store_sec
 *       <ul>
 *         <li>@ref prototypes</li>
 *         <li>@ref add_objects</li>
 *         <li>@ref modify_objects</li>
 *         <li>@ref remove_objects</li>
 *       </ul>
 *     </li>
 *   </ul></li>
 *   <li>@ref relations
 *   <li>@ref view
 *   <ul>
 *     <li>@ref one_to_one</li>
 *     <li>@ref one_to_many</li>
 *   </ul></li>
 *   <li>@ref expressions</li>
 *   <li>@ref database
 *      <ul>
 *        <li>@ref support_sec</li>
 *        <li>@ref db_relation_sec</li>
 *      </ul>
 *   </li>
 * </ul>
 * @htmlonly
 * </div>
 * @endhtmlonly
 */
