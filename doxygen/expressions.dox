/**
 * @htmlonly
 * <div class="width75 float_left">
 * @endhtmlonly
 *
 * @page expressions Expressions
 *
 * @htmlonly
 * <table id="doc_nav"><tbody><tr>
 *   <td><div class="left-arrow-top"></td>
 *   <td align="left" width="40%">Prev</td>
 *   <td align="center" width="20%"></td>
 *   <td align="right" width="40%">Next</td>
 *   <td><div class="right-arrow-top"></td></tr><tr>
 *   <td><div class="left-arrow-bottom"></td>
 *   <td align="left" width="40%">
 * @endhtmlonly
 * @ref view
 * @htmlonly
 *   </td>
 *   <td width="20%"></td>
 *   <td align="right" width="40%">
 * @endhtmlonly
 * @ref database
 * @htmlonly
 *   </td><td><div class="right-arrow-bottom"></td>
 * </tr></tbody></table>
 * @endhtmlonly
 *
 * @section expression_sec Find and Filter Objects
 *
 * When working with an oos::object_view you may want to find
 * a certain object or you want to apply a function only for
 * some of the objects in the view.
 *
 * To achieve this we can use the oos::object_view::find_if method
 * or we can use the global ::for_each_if() function. But how can we
 * define or filter criterium?
 *
 * First add some elements (persons) to the store and create the view.
 * As you can see we've extended the person class with an age attribute.
 *
 * @code
 * // add some friends
 * ostore.insert(new person("joe", 45))
 * ostore.insert(new person("walter", 56));
 * ostore.insert(new person("helen", 37));
 * ostore.insert(new person("tim", 14));
 * ostore.insert(new person("linda", 25));
 * ostore.insert(new person("lea", 30));
 * ostore.insert(new person("georg", 42));
 *  
 * typedef oos::object_view<person> person_view_t;
 * typedef person_view_t::iterator iterator;
 * 
 * person_view_t pview(ostore);
 * @endcode
 *
 * If we want to find the person of age 25 we can achieve this by using
 * the oos::object_view::find_if method. But first we have to create a
 * variable holding the method of our object which should be used for
 * comparation. Here it is person::age().
 *
 * @code
 * // create the variable
 * oos::variable<int> x(oos::make_var(&person::age));
 *
 * // find the person of age 25
 * iterator i = pview.find_if(x == 25);
 * @endcode
 *
 * The call returns the first occurence of the object matching
 * the expression or the end iterator.
 *
 * If you want to apply a function to all objects matching a
 * certain expression use oos::for_each_if() and use it in the
 * following described way.
 *
 * @code
 * // print all persons with age between 20 and 60 years
 * void print(const person_ptr &p)
 * {
 *   std::cout << p->name() << " is between 40 and 60.\n";
 * }
 *
 * // declare a variable/literal for the age
 * oos::variable<int> x(oos::make_var(&person::age));
 *
 * // use the for_each_if function
 * for_each_if(pview.begin(), pview.end(), x > 20 && x < 60, print);
 * @endcode
 *
 * All persons whos age lays between 40 and 60 are printed.
 *
 * @htmlonly
 * <table id="doc_nav"><tbody><tr>
 *   <td><div class="left-arrow-top"></td>
 *   <td align="left" width="40%">Prev</td>
 *   <td align="center" width="20%"></td>
 *   <td align="right" width="40%">Next</td>
 *   <td><div class="right-arrow-top"></td></tr><tr>
 *   <td><div class="left-arrow-bottom"></td>
 *   <td align="left" width="40%">
 * @endhtmlonly
 * @ref view
 * @htmlonly
 *   </td>
 *   <td width="20%"></td>
 *   <td align="right" width="40%">
 * @endhtmlonly
 * @ref database
 * @htmlonly
 *   </td><td><div class="right-arrow-bottom"></td>
 * </tr></tbody></table>
 * @endhtmlonly
 *
 * @htmlonly
 * </div>
 * <div id="side_toc" class="width25 float_right">
 * @endhtmlonly
 * <b>Table of content</b> @n
 * <ul>
 *   <li>@ref index
 *    <ul><li>@ref intro_sec</li></ul>
 *   </li>
 *   <li>@ref store
 *   <ul>
 *    <li>@ref objects_sec</li>
 *    <li>@ref object_store_sec</li>
 *      <ul>
 *        <li>@ref prototypes</li>
 *        <li>@ref add_objects</li>
 *        <li>@ref modify_objects</li>
 *        <li>@ref remove_objects</li>
 *      </ul>
 *   </ul></li>
 *   <li>@ref relations
 *   <li>@ref view
 *   <ul>
 *    <li>@ref one_to_one</li>
 *    <li>@ref one_to_many</li>
 *   </ul></li>
 *   <li>@ref expressions</li>
 *   <li>@ref database</li>
 * </ul>
 * @htmlonly
 * </div>
 * @endhtmlonly
 */
