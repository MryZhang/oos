/**
 * @htmlonly
 * <div class="width75 float_left">
 * @endhtmlonly
 *
 * @page relations Object Relations
 *
 * @htmlonly
 * <table id="doc_nav"><tbody><tr>
 *   <td align="left" width="40%">
 * @endhtmlonly
 * @ref store
 * @htmlonly
 *   </td>
 *   <td width="20%"></td>
 *   <td align="right" width="40%">
 * @endhtmlonly
 * @ref view
 * @htmlonly
 *   </td>
 * </tr></tbody></table>
 * @endhtmlonly
 *
 * @section object_relations_sec Object relations
 *
 * When it comes to object relations you can use one to one and
 * one to many relations in a straight forward way.
 *
 * @subsection one_to_one OneToOne relations
 *
 * In this example we have two object types an address class
 * and a person class.
 * 
 * @code
 * class address : public oos::object
 * {
 * public:
 *   //...
 * 
 * private:
 *   std::string street_;
 *   std::string city_;
 * };
 * @endcode
 *
 * Each person class should have an address, so we add an
 * oos::object_ptr of type address to the members. That's
 * it. Now we have a one to one relationship beetween two
 * classes.
 *
 * @code
 * class person : public oos::object
 * {
 * public:
 *   //...
 *
 * private:
 *   oos::object_ptr<address> address_;
 * };
 * @endcode
 *
 * With this kind of relationship we have a hard linked
 * relationship. Which means if we remove the person from
 * our store the address object is removed as well.
 * 
 * In case we want to keep the address object we can use
 * a oos::object_ref of type adress instead of object_ptr.
 * 
 * @code
 * class person : public oos::object
 * {
 * private:
 *   oos::object_ref<address> address_;
 * };
 * @endcode
 *
 * With object_ref we have a soft link to the address inside
 * our person class and it won't be removed on a person removal.
 * We must explicitly remove the address.
 *
 * @subsection one_to_many OneToMany relations
 *
 * When it comes to one to many releationships it is also
 * quiet easy. OOS comes with three types of container
 * classes which can be used to setup one to many relationships.
 * Because these classes are designed in the same way as
 * the STL classes we can use them in the same way plus the
 * benefit of the relationship.
 * 
 * Our handy person class needs a list of friends which are also
 * of type person. And because we want this list with soft linked
 * person we use oos::object_ref as the type of the list.
 *
 * @code
 * class person : public oos::object
 * {
 * public:
 *   // the value type of the list
 *   typedef oos::object_ref<person> person_ref;
 *   // the list definition
 *   typedef oos::object_list<person_ref> person_list_t;
 *   // shortcuts to the iterators
 *   typedef person_list_t::iterator iterator;
 *   typedef person_list_t::const_iterator const_iterator;
 *
 *   // c'tor for person
 *   person(const std::string &name)
 *     : name_(name)
 *     // the list need the person to handle the relationship
 *     , friends_(this) 
 *   {}
 *
 *   std::string name() const { return name_; }
 *
 *   // add a friend to persons friend list
 *   void add_friend(const person_ref &p)
 *   {
 *     friends_.push_back(p);
 *   }
 *
 *   // STL like iterators
 *   iterator begin() { return friends_.begin(); }
 *   iterator end() { return friends_.end(); }
 *
 * private:
 *   std::string name_;
 *   person_list_t friends_;
 * };
 * @endcode
 *
 * Why declare a list if we don't use it? Next is an example howto
 * to use our persons friend list.
 *
 * We insert a new person into the object_store. Than we insert and
 * immediatily add some persons as friends to our first person.
 *
 * @code
 * typedef oos::object_ptr<person> person_ptr;
 *
 * // create a new person
 * person_ptr p = ostore.insert(new person("joe"));
 *
 * // add some friends
 * p->add_friend(ostore.insert(new person("walter")));
 * p->add_friend(ostore.insert(new person("helen")));
 * p->add_friend(ostore.insert(new person("tim")));
 * @endcode
 *
 * Now we can simply iterate over the list like we used to
 * do it with all STL containers. Period.
 *
 * @code
 * // access all friends
 * person::iterator i = p->begin();
 * for (i; i != p->end(); ++i) {
 *   std::cout << i->value()->name() << std::endl;
 * }
 * @endcode
 *
 * @htmlonly
 * <table id="doc_nav"><tbody><tr>
 *   <td align="left" width="40%">Prev</td>
 *   <td align="center" width="20%"></td>
 *   <td align="right" width="40%">Next</td></tr><tr>
 *   <td align="left" width="40%">
 * @endhtmlonly
 * @ref store
 * @htmlonly
 *   </td>
 *   <td width="20%"></td>
 *   <td align="right" width="40%">
 * @endhtmlonly
 * @ref view
 * @htmlonly
 *   </td>
 * </tr></tbody></table>
 * @endhtmlonly
 *
 * @htmlonly
 * </div>
 * <div id="side_toc" class="width25 float_right">
 * @endhtmlonly
 * <b>Table of content</b> @n
 * <ul>
 *   <li>@ref index
 *    <ul><li>@ref intro_sec</li></ul>
 *   </li>
 *   <li>@ref store
 *   <ul>
 *    <li>@ref objects_sec</li>
 *    <li>@ref object_store_sec</li>
 *      <ul>
 *        <li>@ref prototypes</li>
 *        <li>@ref add_objects</li>
 *        <li>@ref modify_objects</li>
 *        <li>@ref remove_objects</li>
 *      </ul>
 *   </ul></li>
 *   <li>@ref relations
 *   <li>@ref view
 *   <ul>
 *    <li>@ref one_to_one</li>
 *    <li>@ref one_to_many</li>
 *   </ul></li>
 *   <li>@ref expressions</li>
 *   <li>@ref database</li>
 * </ul>
 * @htmlonly
 * </div>
 * @endhtmlonly
 */
