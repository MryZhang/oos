Todo:
=====


Fill container on loading database

- Determine the item type of the container
  1. builtin type                 -> automatic value table
                                     fill container when reading relation table
  2. object type w/ ref column    -> fill container when reading object table
  3. object type wo/ ref column   -> automatic relation table
                                     fill container when reading relation table

The behaviour for builtin type and object wo/ back link is the same.

- Insert relation/value object prototype internally

For builtin types the relation/value table is inserted automatically

object_list<P, int> int_list_(parent);

For object types the relation table is only inserted on demand

Not inserted:

object_list<P, object_ptr<T> > t_list_(parent, "parent")

Problem: It could be that the item hasn't a back link (mapped by) to the
parent. That means that there has to be a relation table. How can we
determine this?

In the example from above "parent" could be either the back link or the 
name of the relation. Solution could be a flag "is_back_ref" which is
true per default.


Inserted (third param tells the name of the relation):

object_list<P, object_ptr<T> > t_list_(parent, "parent", "item_parent_rel")

object_container should provide a method to generate a producer for the
relation table which is be virtual and must be overwritten by the
concrete container.

object_base_producer* object_container::create_relation_producer();




=============================

Item
Ref_List_A
Ref_List_B


initializing:

insert_prototype(ListA)
insert_prototype(ListB)
insert_prototype(Item)

- A inserts Item in advance with typeid as id
- B must find prototype_node of Item inserted by A by typeid
- Item must find unfinished prototype_node to finish it

Solution: unfinished prototype nodes are inserted with typeid
and when finished typeid entry is removed

==============================

A second map holds typeid to prototype_node map entries, to handle
different prototype_nodes of the same typeid (tracks and backup_tracks
in playlist)
